{"version":3,"sources":["stateBindings.js"],"names":[],"mappings":"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","file":"stateBindings.js","sourcesContent":["import Immutable from 'immutable'\nimport { getState, _dependencyTracker } from './appState'\nimport { dereference, reference } from './reference'\n\n/**\n * A React mixin to link state paths or Getters to a React state.\n *\n * @param bindingsFn\n * @returns {{getInitialState: Function, componentDidMount: Function, componentWillUnmount: Function}}\n */\nconst stateBindings = function(bindingsFn) {\n\tif (typeof(bindingsFn) != \"function\")\n\t\tthrow new Error(\"stateBindings needs to take a single function which returns the bindings\");\n\n\tlet listener, bindings, keyPathsToBindingNames, dependencies = Immutable.Map();\n\n\tconst onSwap = function(newState, oldState, keyPath) {\n\t\t// The keypath comes in as an array so convert it to a List\n\t\tkeyPath = Immutable.List(keyPath);\n\n\t\t// A binding is considered to have changed if its keyPath contains the swapped keyPath.\n\t\t// So ['a', 'b', 'c'] would be changed by a change to ['a'], ['a', 'b'] or ['a', 'b', 'c'].\n\t\t// Note that it would also be changed by any deeper change, for example ['a', 'b', 'c', 'd'].\n\t\t// Convert it to a set after the computation since we don't care about duplicates.\n\t\tconst bindingNames = keyPathsToBindingNames.filter((names, path) => {\n\t\t\tconst compareLength = Math.min(path.size, keyPath.size);\n\t\t\treturn Immutable.is(keyPath.slice(0, compareLength), path.slice(0, compareLength))\n\t\t}).toSet().flatten();\n\n\t\t// If there are any bindings that need to change then update the state appropriately\n\t\tif (bindingNames && bindingNames.size > 0) {\n\t\t\tconst newStates = bindingNames.reduce((acc, bindingName) => {\n\t\t\t\treturn acc.set(bindingName, dereference(bindings.get(bindingName)))\n\t\t\t}, Immutable.Map());\n\n\t\t\t// React needs to the top level to be an object\n\t\t\tthis.setState(newStates.toObject());\n\t\t}\n\t};\n\n\tconst executeAllBindings = (bindings) => {\n\t\t// Run the bindings\n\t\tconst newState = bindings.map(executeBinding).toObject();\n\n\t\t// Now that the bindings have run we will have a new dependencies map, so turn it into something that onSwap can use.\n\t\t// Specifically turn binding name -> dependency keyPaths into dependency keyPaths -> binding names\n\t\tkeyPathsToBindingNames = bindings\n\t\t\t.map((binding, bindingName) => dependencies.get(bindingName))\n\t\t\t.reduce((acc, dependencies, stateProperty) => {\n\t\t\t\tif (dependencies) {\n\t\t\t\t\tdependencies.forEach(dependency => {\n\t\t\t\t\t\tlet set = (acc.get(dependency) || Immutable.Set()).add(stateProperty);\n\t\t\t\t\t\tacc = acc.set(dependency, set);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn acc;\n\t\t\t}, Immutable.Map());\n\n\t\treturn newState;\n\t};\n\n\tconst executeBinding = (binding, bindingName) => {\n\t\t_dependencyTracker.start();\n\t\tconst result = dereference(binding);\n\t\tdependencies = dependencies.set(bindingName, _dependencyTracker.end());\n\t\treturn result;\n\t};\n\n\treturn {\n\t\tgetInitialState() {\n\t\t\t// Call the binding function to get the bindings (getInitialState should only be called once but put an explicit\n\t\t\t// test just in case).  Call the function in the context of the component.\n\t\t\tif (!bindings) bindings = Immutable.Map(bindingsFn.call(this));\n\n\t\t\t// Calculate and return the bindings\n\t\t\treturn executeAllBindings(bindings);\n\t\t},\n\n\t\tcomponentDidMount() {\n\t\t\tlistener = onSwap.bind(this);\n\t\t\tgetState().on(\"swap\", listener);\n\t\t},\n\n\t\tcomponentWillUnmount() {\n\t\t\t// Stop observing keypaths\n\t\t\tgetState().removeListener(\"swap\", listener);\n\n\t\t\t// Clear the bindings\n\t\t\tbindings = null;\n\t\t}\n\t};\n\n};\n\nexport default stateBindings"],"sourceRoot":"/source/"}