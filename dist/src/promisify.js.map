{"version":3,"sources":["promisify.js"],"names":[],"mappings":";;;;;;;;;;yBAAsB,WAAW;;;;2CACY,YAAY;;2BAC7B,aAAa;;AAEzC,IAAM,SAAS,GAAG,mBAAS,EAAE,EAAgB;KAAd,OAAO,gCAAG,EAAE;;AAC1C,QAAO,UAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM,EAAE;AAC5C,MAAM,YAAY;;;;;;;;;;KAAG,YAAM;;AAE1B,gCAPgB,kBAAkB,CAOf,KAAK,EAAE,CAAC;AAC3B,OAAM,MAAM,GAAG,EAAE,EAAE,CAAC;AACpB,OAAM,YAAY,GAAG,6BATL,kBAAkB,CASM,GAAG,EAAE,CAAC;;;AAG9C,OAAI,YAAY,CAAC,IAAI,CAAC,UAAA,UAAU;WAAI,aAX9B,WAAW,CAW+B,UAAU,CAAC,OAAO,EAAE,CAAC,IAAI,IAAI;IAAA,CAAC,EAAE;AAC/E,iCAbK,QAAQ,EAaH,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACtC,MAAM;;AAEN,WAAO,CAAC,MAAM,CAAC,CAAC;IAChB;GACD,CAAA,CAAC;;;AAGF,YAAU,CAAC,YAAM;AAChB,gCAtBM,QAAQ,EAsBJ,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AAChD,SAAM,EAAE,CAAC;GACT,EAAE,OAAO,GAAG,IAAI,CAAC,CAAC;;AAEnB,cAAY,EAAE,CAAC;EACf,CAAC,CAAC;CACH,CAAC;;qBAEa,SAAS","file":"promisify.js","sourcesContent":["import Immutable from 'immutable'\nimport { getState, _dependencyTracker } from './appState'\nimport { dereference } from './reference'\n\nconst promisify = function(fn, timeout = 10) {\n\treturn new Promise(function(resolve, reject) {\n\t\tconst tryToResolve = () => {\n\t\t\t// Run the function, watching any dependencies TODO: it might not be necessary to continuously re-run fn\n\t\t\t_dependencyTracker.start();\n\t\t\tconst result = fn();\n\t\t\tconst dependencies = _dependencyTracker.end();\n\n\t\t\t// If any dependencies are null then watch for the next change\n\t\t\tif (dependencies.some(dependency => dereference(dependency.toArray()) == null)) {\n\t\t\t\tgetState().once(\"swap\", tryToResolve);\n\t\t\t} else {\n\t\t\t\t// Otherwise we can resolve the promise\n\t\t\t\tresolve(result);\n\t\t\t}\n\t\t};\n\n\t\t// If the timeout is exceeded without the promise resolving then remove the listener and reject the promise\n\t\tsetTimeout(() => {\n\t\t\tgetState().removeListener(\"swap\", tryToResolve);\n\t\t\treject();\n\t\t}, timeout * 1000);\n\n\t\ttryToResolve();\n\t});\n};\n\nexport default promisify\n"],"sourceRoot":"/source/"}