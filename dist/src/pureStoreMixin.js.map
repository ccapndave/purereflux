{"version":3,"sources":["pureStoreMixin.js"],"names":[],"mappings":";;;;IAAO,SAAS,2BAAM,WAAW;;IAC1B,MAAM,2BAAM,QAAQ;;IAClB,SAAS,WAAQ,aAAa,EAA9B,SAAS;;AAElB,IAAM,cAAc,GAAG,wBAAS,QAAQ,EAAE;;AAEzC,KAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAC7B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;;AAGnD,QAAO;AACN,MAAI,EAAA,gBAAG;;AAEN,OAAI,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,eAAe,GAAG,YAAM,EAAE,CAAC;;;;;;AAM3D,OAAI,CAAC,SAAS,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;AACxC,aAAS,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;IAC7E;;;AAGD,OAAI,CAAC,MAAM,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;GACzC;;;;;;;;;;AAUD,KAAG,EAAA,aAAC,GAAG,EAAE,KAAK,EAAE;;AAEf,OAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;;AAExD,OAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AACvB,QAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IACvE,MAAM;AACN,QAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC9B;;;AAGD,UAAO,IAAI,CAAC;GACZ;;;;;;;;;AASD,KAAG,EAAA,aAAC,GAAG,EAAE;AACR,OAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAE,GAAG,CAAE;OAC/C,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACjC,UAAO,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE,GAAG,MAAM,CAAC;GAC9C;;;;;;;;AAQD,QAAM,EAAA,gBAAC,GAAG,EAAE,EAAE,EAAE;;AAEf,OAAI,OAAO,GAAG,KAAK,UAAU,IAAI,EAAE,KAAK,SAAS,EAAE;AAClD,MAAE,GAAG,GAAG,CAAC,AAAC,GAAG,GAAG,EAAE,CAAC;IACnB;;;AAGD,OAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;;AAEzC,UAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;GACnC;EACD,CAAA;CACD,CAAC;;iBAEa,cAAc","file":"pureStoreMixin.js","sourcesContent":["import Immutable from 'immutable'\nimport Reflux from 'reflux'\nimport { reference } from './reference'\n\nconst PureStoreMixin = function(storeKey) {\n\t// Don't allow dots in the storeKey or it will confuse our path system\n\tif (storeKey.indexOf(\".\") >= 0)\n\t\tthrow new Error(\"Store keys cannot contain dots\");\n\n\n\treturn {\n\t\tinit() {\n\t\t\t// If no initial state is defined set it to an empty object\n\t\t\tif (!this.getInitialState) this.getInitialState = () => {};\n\n\t\t\t// Construct the object we are going to put in the global state.  We are going to convert the object\n\t\t\t// to an Immutable.js structure.  Note that even if there are already Immutable.js structures in the\n\t\t\t// initial state is doesn't matter.  Store it in the global state with a reference cursor under the\n\t\t\t// storeKey.  Note that if the key already exists then do nothing.\n\t\t\tif (!reference().cursor().has(storeKey)) {\n\t\t\t\treference().cursor().set(storeKey, Immutable.fromJS(this.getInitialState()));\n\t\t\t}\n\n\t\t\t// Create a reference cursor to the state\n\t\t\tthis.cursor = reference(storeKey).cursor;\n\t\t},\n\n\t\t/**\n\t\t * A helper method for setting a value on the default cursor.  For the key it accepts a\n\t\t * keypath array or a single value.\n\t\t *\n\t\t * @param key\n\t\t * @param value\n\t\t * @returns {*}\n\t\t */\n\t\tset(key, value) {\n\t\t\t// Turn single element arrays into a string\n\t\t\tif (Array.isArray(key) && key.length == 1) key = key[0];\n\n\t\t\tif (Array.isArray(key)) {\n\t\t\t\tthis.cursor(key.slice(0, key.length - 1)).set(key.slice(-1)[0], value);\n\t\t\t} else {\n\t\t\t\tthis.cursor().set(key, value);\n\t\t\t}\n\n\t\t\t// Allow set chaining (TODO: this might work anyway by returning the values above... test it)\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * A helper method for getting a value from the default cursor.  It accepts a keypath array\n\t\t * or a single string.\n\t\t *\n\t\t * @param key\n\t\t * @returns {*}\n\t\t */\n\t\tget(key) {\n\t\t\tconst keyPath = Array.isArray(key) ? key : [ key ],\n\t\t\t\t  result = this.cursor(keyPath);\n\t\t\treturn result.deref ? result.deref() : result;\n\t\t},\n\n\t\t/**\n\t\t * A helper method for updating the default cursor.  Equivalent to this.cursor().update(...)\n\t\t *\n\t\t * @param fn\n\t\t * @returns {*}\n\t\t */\n\t\tupdate(key, fn) {\n\t\t\t// Accept a single function argument\n\t\t\tif (typeof key === \"function\" && fn === undefined) {\n\t\t\t\tfn = key; key = [];\n\t\t\t}\n\n\t\t\t// Accept a string key\n\t\t\tif (typeof key === \"string\") key = [key];\n\n\t\t\treturn this.cursor(key).update(fn);\n\t\t}\n\t}\n};\n\nexport default PureStoreMixin;"],"sourceRoot":"/source/"}