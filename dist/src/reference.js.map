{"version":3,"sources":["reference.js"],"names":[],"mappings":";;;;;;wBAAgC,YAAY;;IAAnC,QAAQ,aAAR,QAAQ;IAAE,KAAK,aAAL,KAAK;;;;;;;;AAQxB,IAAM,WAAW,GAAG,UAAC,UAAU,EAAK;AACnC,MAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AAC9B,WAAO,KAAK,CAAC,UAAU,CAAC,CAAC;GACzB,MAAM,IAAI,OAAO,UAAU,AAAC,KAAK,UAAU,EAAE;AAC7C,WAAO,UAAU,EAAE,CAAC;GACpB,MAAM;AACN,UAAM,IAAI,KAAK,4CAA0C,OAAO,UAAU,AAAC,WAAM,UAAU,CAAG,CAAC;GAC/F;CACD,CAAC;;;;;AAKF,IAAM,SAAS,GAAG,UAAC,OAAO;SAAK,QAAQ,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC;CAAA,CAAC;;QAEpD,WAAW,GAAX,WAAW;QAAE,SAAS,GAAT,SAAS","file":"reference.js","sourcesContent":["import { getState, state } from './appState'\n\n/**\n * Turn a path or function into a real value\n *\n * @param dependency\n * @returns {*}\n */\nconst dereference = (dependency) => {\n\tif (Array.isArray(dependency)) {\n\t\treturn state(dependency);\n\t} else if (typeof(dependency) === \"function\") {\n\t\treturn dependency();\n\t} else {\n\t\tthrow new Error(`Illegal argument type for dependency (${typeof(dependency)}): ${dependency}`);\n\t}\n};\n\n/**\n * Get a reference cursor for the given keyPath\n */\nconst reference = (keyPath) => getState().reference(keyPath);\n\nexport { dereference, reference }"],"sourceRoot":"/source/"}