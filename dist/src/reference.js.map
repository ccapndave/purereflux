{"version":3,"sources":["reference.js"],"names":[],"mappings":";;wBAAgC,YAAY;;IAAnC,QAAQ,aAAR,QAAQ;IAAE,KAAK,aAAL,KAAK;;;;;;;AAOxB,IAAM,iBAAiB,GAAG,UAAC,OAAO;SAAK,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI;CAAA,CAAC;;;;;;;;AAQ3E,IAAM,WAAW,GAAG,UAAC,UAAU,EAAK;AACnC,MAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AAC9B,WAAO,KAAK,CAAC,UAAU,CAAC,CAAC;GACzB,MAAM,IAAI,OAAO,UAAU,AAAC,KAAK,UAAU,EAAE;AAC7C,WAAO,UAAU,EAAE,CAAC;GACpB,MAAM;AACN,UAAM,IAAI,KAAK,4CAA0C,OAAO,UAAU,AAAC,WAAM,UAAU,CAAG,CAAC;GAC/F;CACD,CAAC;;;;;AAKF,IAAM,SAAS,GAAG,UAAC,OAAO;SAAK,QAAQ,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC;CAAA,CAAC;;;;;AAK7D,IAAM,MAAM,GAAG,UAAC,OAAO;SAAK,QAAQ,EAAE,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;CAAA,CAAC;;QAEjE,WAAW,GAAX,WAAW;QAAE,SAAS,GAAT,SAAS;QAAE,MAAM,GAAN,MAAM","file":"reference.js","sourcesContent":["import { getState, state } from './appState'\n\n/**\n * Split a path up into an array that can be used with an immstruct cursor\n *\n * @param keyPath\n */\nconst keyPathToKeyArray = (keyPath) => keyPath ? keyPath.split(\".\") : null;\n\n/**\n * Turn a path or function into a real value\n *\n * @param dependency\n * @returns {*}\n */\nconst dereference = (dependency) => {\n\tif (Array.isArray(dependency)) {\n\t\treturn state(dependency);\n\t} else if (typeof(dependency) === \"function\") {\n\t\treturn dependency();\n\t} else {\n\t\tthrow new Error(`Illegal argument type for dependency (${typeof(dependency)}): ${dependency}`);\n\t}\n};\n\n/**\n * Get a reference cursor for the given keyPath\n */\nconst reference = (keyPath) => getState().reference(keyPath);\n\n/**\n * Get a cursor for the given keyPath\n */\nconst cursor = (keyPath) => getState().cursor(keyPathToKeyArray(keyPath));\n\nexport { dereference, reference, cursor }"],"sourceRoot":"/source/"}