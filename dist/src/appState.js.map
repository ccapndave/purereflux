{"version":3,"sources":["appState.js"],"names":[],"mappings":";;;;;;;;;;QAgCgB,UAAU,GAAV,UAAU;QAMV,QAAQ,GAAR,QAAQ;QAIR,eAAe,GAAf,eAAe;QAIf,KAAK,GAAL,KAAK;;yBA9CC,WAAW;;;;yBACX,WAAW;;;;;AAGjC,IAAI,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;;;AAGlC,IAAI,UAAU,GAAG,KAAK;IAAE,YAAY,YAAA,CAAC;;AAErC,SAAS,MAAM,GAAG;AACjB,KAAI,OAAO,YAAY,KAAK,WAAW,EAAE,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;CACrH;;;AAGD,SAAS,WAAW,CAAC,eAAe,EAAE;;AAErC,KAAI,QAAQ,EAAE,QAAQ,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;;;AAGtD,KAAI,KAAK,YAAA,CAAC;AACV,KAAI,eAAe,IAAI,OAAO,YAAY,KAAK,WAAW,IAAI,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AAC/F,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;AACjE,OAAK,GAAG,uBAAU,uBAAU,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;EACjD,MAAM;AACN,OAAK,GAAG,uBAAU,EAAE,CAAC,CAAC;EACtB;;;AAGD,MAAK,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzB,QAAO,KAAK,CAAC;CACb;;AAEM,SAAS,UAAU,GAAG;AAC5B,SAAQ,GAAG,uBAAU,EAAE,CAAC,CAAA;AACxB,WAAU,GAAG,KAAK,CAAC;AACnB,aAAY,GAAG,IAAI,CAAC;CACpB;;AAEM,SAAS,QAAQ,GAAG;AAC1B,QAAO,QAAQ,CAAC;CAChB;;AAEM,SAAS,eAAe,GAAG;AACjC,QAAO,QAAQ,CAAC,OAAO,CAAC;CACxB;;AAEM,SAAS,KAAK,CAAC,OAAO,EAAE;AAC9B,KAAI,CAAC,MAAA,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAC1B,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;;AAE1D,KAAI,UAAU,EAAE,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,uBAAU,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AACzE,QAAO,QAAQ,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;CAC1C;;AAED,IAAM,kBAAkB,GAAG;;AAE1B,MAAK,EAAA,iBAAG;AACP,YAAU,GAAG,IAAI,CAAC;AAClB,cAAY,GAAG,uBAAU,GAAG,EAAE,CAAC;EAC/B;;AAED,IAAG,EAAA,eAAG;AACL,YAAU,GAAG,KAAK,CAAC;AACnB,SAAO,YAAY,CAAC;EACpB;;CAED,CAAC;;QAEO,kBAAkB,GAAlB,kBAAkB;;;AAG3B,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;AAClC,OAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC3B,OAAM,CAAC,eAAe,GAAG,eAAe,CAAC;AACzC,OAAM,CAAC,KAAK,GAAG,KAAK,CAAC;CACrB","file":"appState.js","sourcesContent":["import immstruct from 'immstruct'\nimport Immutable from 'immutable'\n\n// This is the global application state\nlet appState = createState(false);\n\n// This is used to track dependencies\nlet isTracking = false, dependencies;\n\nfunction onSwap() {\n\tif (typeof localStorage !== \"undefined\") localStorage.setItem(\"appState\", JSON.stringify(getCurrentState().toJSON()))\n}\n\n// If there is a state in localStorage then use that, otherwise make a fresh one\nfunction createState(useLocalStorage) {\n\t// Remove any swap listeners if they exist\n\tif (appState) appState.removeListener(\"swap\", onSwap);\n\n\t// Create a state - either a fresh one, or a restoration from localStorage.appState\n\tlet state;\n\tif (useLocalStorage && typeof localStorage !== \"undefined\" && localStorage.getItem(\"appState\")) {\n\t\tconst storedState = JSON.parse(localStorage.getItem(\"appState\"));\n\t\tstate = immstruct(Immutable.fromJS(storedState));\n\t} else {\n\t\tstate = immstruct({});\n\t}\n\n\t// Add a swap listener\n\tstate.on(\"swap\", onSwap);\n\treturn state;\n}\n\nexport function clearState() {\n\tappState = immstruct({})\n\tisTracking = false;\n\tdependencies = null;\n}\n\nexport function getState() {\n\treturn appState;\n}\n\nexport function getCurrentState() {\n\treturn appState.current;\n}\n\nexport function state(keyPath) {\n\tif (!Array.isArray(keyPath))\n\t\tthrow new Error(\"State paths must be given as an array\");\n\n\tif (isTracking) dependencies = dependencies.add(Immutable.List(keyPath));\n\treturn getState().cursor(keyPath).deref();\n}\n\nconst _dependencyTracker = {\n\n\tstart() {\n\t\tisTracking = true;\n\t\tdependencies = Immutable.Set();\n\t},\n\n\tend() {\n\t\tisTracking = false;\n\t\treturn dependencies;\n\t}\n\n};\n\nexport { _dependencyTracker };\n\n// For debugging in a browser\nif (typeof window !== \"undefined\") {\n\twindow.getState = getState;\n\twindow.getCurrentState = getCurrentState;\n\twindow.state = state;\n}"],"sourceRoot":"/source/"}